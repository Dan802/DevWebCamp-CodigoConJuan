{"version":3,"sources":["horas.js","influencers.js","tags.js"],"names":["document","querySelector","busqueda","categoria_id","dia","categoria_select","dias_input_radios","querySelectorAll","inputHiddenDia","inputHiddenHora","terminoBusqueda","e","horaPrevia","classList","remove","value","limpiarCampos","target","name","Number","Object","values","includes","async","url","resultado","fetch","eventos","json","console","log","listadoHoras_HTML","forEach","li","add","horasId_Tomados","map","evento","hora_id","listadoHorasArray_HTML","Array","from","filter","dataset","horaid","hora","addEventListener","seleccionarHora","obtenerHorasDisponibles","buscarEventos","influencersInput","influencers","influencersFiltrados","listadoInfluencers","influencerHidden","seleccionarInfluencer","influencer","influencerPrevio","influencerId","respuesta","arrayInfluencers","nombre","firstName","trim","lastName","id","formatearInfluencers","obtenerInfluencers","length","firstChild","removeChild","busqueda_sin_tilde","normalize","replace","expresion","RegExp","toLowerCase","search","influencerHTML","createElement","textContent","onclick","appendChild","noResultados","mostrarInfluencer","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","tag","etiqueta","eliminarTag","actualizarInputHiden","toString","split","key","preventDefault"],"mappings":"CAAA,WAGA,GAFAA,SAAAC,cAAA,UAEA,CAEA,IAAAC,EAAA,CACAC,aAAA,GACAC,IAAA,IAGA,MAAAC,EAAAL,SAAAC,cAAA,yBACAK,EAAAN,SAAAO,iBAAA,gBACAC,EAAAR,SAAAC,cAAA,mBACAQ,EAAAT,SAAAC,cAAA,oBAgBA,SAAAS,EAAAC,IAXA,WACA,MAAAC,EAAAZ,SAAAC,cAAA,8BAEAW,GACAA,EAAAC,UAAAC,OAAA,6BAGAL,EAAAM,MAAA,GACAP,EAAAO,MAAA,GAIAC,GACAd,EAAAS,EAAAM,OAAAC,MAAAC,OAAAR,EAAAM,OAAAF,OAGAK,OAAAC,OAAAnB,GAAAoB,SAAA,KAOAC,iBACA,MAAAnB,IAAAA,EAAAD,aAAAA,GAAAD,EAEAsB,EAAA,8BAAApB,kBAAAD,IAEAsB,QAAAC,MAAAF,GACAG,QAAAF,EAAAG,OAEAC,QAAAC,IAAA,2BAAAH,GAKA,SAAAA,GAEA,MAAAI,EAAA/B,SAAAO,iBAAA,aACAwB,EAAAC,QAAAC,GAAAA,EAAApB,UAAAqB,IAAA,+BAGA,MAAAC,EAAAR,EAAAS,IAAAC,GAAAA,EAAAC,SASAC,EAAAC,MAAAC,KAAAV,GAGAQ,EAAAG,OACAT,IAAAE,EAAAb,SAAAW,EAAAU,QAAAC,SAaAZ,QAAAC,GAAAA,EAAApB,UAAAC,OAAA,+BAGAd,SAAAO,iBAAA,8CAGAyB,QAAAa,GAAAA,EAAAC,iBAAA,QAAAC,IAzCAC,CAAArB,GAbAsB,GAyDA,SAAAF,EAAApC,GAGA,MAAAC,EAAAZ,SAAAC,cAAA,8BAEAW,GACAA,EAAAC,UAAAC,OAAA,6BAGAH,EAAAM,OAAAJ,UAAAqB,IAAA,6BAGAzB,EAAAM,MAAAI,OAAAR,EAAAM,OAAA0B,QAAAC,QACApC,EAAAO,MAAAI,OAAAnB,SAAAC,cAAA,wBAAAc,OAEAc,QAAAC,IAAA,yBAAArB,EAAAM,OACAc,QAAAC,IAAA,wBAAAtB,EAAAO,OACAc,QAAAC,IAAA,sBAAA5B,EAAA,cAjGAG,EAAAyC,iBAAA,SAAApC,GACAJ,EAAA0B,QAAA5B,GAAAA,EAAA0C,iBAAA,SAAApC,KAhBA,GCAA,WAEA,MAAAwC,EAAAlD,SAAAC,cAAA,gBAEA,IAAAiD,EAAA,OAEA,IAAAC,EAAA,GACAC,EAAA,GACA,MAAAC,EAAArD,SAAAC,cAAA,wBACAqD,EAAAtD,SAAAC,cAAA,yBAyFA,SAAAsD,EAAA5C,GACA,MAAA6C,EAAA7C,EAAAM,OAEAwC,EAAAzD,SAAAC,cAAA,kDAEAwD,GACAA,EAAA5C,UAAAC,OAAA,iDAGA0C,EAAA3C,UAAAqB,IAAA,iDAEAoB,EAAAvC,MAAAyC,EAAAb,QAAAe,cA9FAnC,iBACA,MAEAoC,QAAAjC,MAFA,qBAQA,SAAAkC,EAAA,IAEAT,EAAAS,EAAAxB,IAAAoB,IACA,CACAK,OAAA,GAAAL,EAAAM,UAAAC,UAAAP,EAAAQ,SAAAD,SACAE,GAAAT,EAAAS,MAIApC,QAAAC,IAAA,+BAAAqB,GAZAe,OAFAP,EAAA/B,QARAuC,GAEAjB,EAAAJ,iBAAA,SAuBA,SAAAnC,GACA,MAAAT,EAAAS,EAAAM,OAAAF,MAEA,GAAAb,EAAAkE,OAAA,EAAA,CAGA,IAFAhB,EAAA,GAEAC,EAAAgB,YACAhB,EAAAiB,YAAAjB,EAAAgB,YAGA,OAIA,MAAAE,EAAArE,EAAAsE,UAAA,OAAAC,QAAA,mBAAA,IAIAC,EAAA,IAAAC,OAAAJ,EAAA,KAEAnB,EAAAD,EAAAT,OAAAc,IAIA,IAAA,GAFAA,EAAAK,OAAAW,UAAA,OAAAC,QAAA,mBAAA,IAEAG,cAAAC,OAAAH,GACA,OAAAlB,IAOA,WAEA,KAAAH,EAAAgB,YACAhB,EAAAiB,YAAAjB,EAAAgB,YAGA,GAAAjB,EAAAgB,OAAA,EAEAhB,EAAApB,QAAAwB,IAEA,MAAAsB,EAAA9E,SAAA+E,cAAA,MACAD,EAAAjE,UAAAqB,IAAA,mCACA4C,EAAAE,YAAAxB,EAAAK,OACAiB,EAAAnC,QAAAe,aAAAF,EAAAS,GACAa,EAAAG,QAAA1B,EAEAF,EAAA6B,YAAAJ,SAGA,CAEA,MAAAK,EAAAnF,SAAA+E,cAAA,KACAI,EAAAtE,UAAAqB,IAAA,qCACAiD,EAAAH,YAAA,qCAEA3B,EAAA6B,YAAAC,IA5BAC,MAjEA,GCAA,WACA,MAAAC,EAAArF,SAAAC,cAAA,eAEA,GAAAoF,EAAA,CAEA,MAAAC,EAAAtF,SAAAC,cAAA,SACAsF,EAAAvF,SAAAC,cAAA,mBACA,IAAAuF,EAAA,GA0BA,SAAAC,IACAH,EAAAN,YAAA,GACAQ,EAAAxD,QAAA0D,IACA,MAAAC,EAAA3F,SAAA+E,cAAA,MACAY,EAAA9E,UAAAqB,IAAA,mBACAyD,EAAAX,YAAAU,EACAC,EAAAV,QAAAW,EACAN,EAAAJ,YAAAS,KAIAE,IAGA,SAAAD,EAAAjF,GACAA,EAAAM,OAAAH,SAGA0E,EAAAA,EAAA9C,OAAAgD,GAAAA,IAAA/E,EAAAM,OAAA+D,aACAa,IAGA,SAAAA,IACAN,EAAAxE,MAAAyE,EAAAM,WA9CA,KAAAP,EAAAxE,QACAyE,EAAAD,EAAAxE,MAAAgF,MAAA,KACAN,KAGAJ,EAAAvC,iBAAA,YAEA,SAAAnC,GAEA,GAAA,MAAAA,EAAAqF,IAAA,CAEA,GAAA,KAAArF,EAAAM,OAAAF,MAAAgD,QAAApD,EAAAM,OAAAF,MAAAqD,OAAA,EACA,OAGAzD,EAAAsF,iBAEAT,EAAA,IAAAA,EAAA7E,EAAAM,OAAAF,MAAAgD,QACAsB,EAAAtE,MAAA,GACA0E,SA7BA","file":"bundle.js","sourcesContent":["(function() {\r\n    const horas = document.querySelector('#horas');\r\n\r\n    if(horas) {\r\n\r\n        let busqueda = {\r\n            categoria_id: '', \r\n            dia:''\r\n        }\r\n\r\n        const categoria_select = document.querySelector('[name=\"categoria_id\"]');\r\n        const dias_input_radios = document.querySelectorAll('[name=\"dia\"]');\r\n        const inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\r\n        const inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\r\n\r\n        categoria_select.addEventListener('change', terminoBusqueda);\r\n        dias_input_radios.forEach(dia => dia.addEventListener('change', terminoBusqueda));\r\n\r\n        function limpiarCampos() {\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n\r\n            if(horaPrevia) {\r\n                horaPrevia.classList.remove('horas__hora--seleccionada');\r\n            }\r\n\r\n            inputHiddenHora.value = '';\r\n            inputHiddenDia.value = '';\r\n        }\r\n\r\n        function terminoBusqueda(e) {\r\n            limpiarCampos();\r\n            busqueda[e.target.name] = Number(e.target.value);\r\n\r\n            //Si los valores en busqueda incluyen un argumento vacio entonces...\r\n            if(Object.values(busqueda).includes('')){\r\n                return;\r\n            }\r\n\r\n            buscarEventos();\r\n        }\r\n\r\n        async function buscarEventos() {\r\n            const {dia, categoria_id } = busqueda;\r\n\r\n            const url = `/api/evento-horario?dia_id=${dia}&categoria_id=${categoria_id}`;\r\n\r\n            const resultado = await fetch(url);\r\n            const eventos = await resultado.json();\r\n\r\n            console.log('resultado API(eventos): ', eventos);\r\n\r\n            obtenerHorasDisponibles(eventos);\r\n        }\r\n\r\n        function obtenerHorasDisponibles(eventos) {\r\n            // 1.\r\n                const listadoHoras_HTML = document.querySelectorAll('#horas li');\r\n                listadoHoras_HTML.forEach(li => li.classList.add('horas__hora--deshabilitada'));\r\n\r\n            // 2. Comprobar las horas que han sido tomadas\r\n                const horasId_Tomados = eventos.map( evento => evento.hora_id);\r\n\r\n                // Lo de arriba es igual a crear un nuevo arreglo solo con los id de las horas, o en otras palabras:\r\n                // let horasId_Tomados = [];\r\n                // eventos.forEach(evento => {\r\n                //     horasId_Tomados.push(evento.hora_id);\r\n                // } );\r\n\r\n            // 3. Lo convertimos a Array para aplicar el filter\r\n                const listadoHorasArray_HTML = Array.from(listadoHoras_HTML);\r\n\r\n            // 4. Creamos un array con los li disponibles\r\n                const li_NO_Tomados = listadoHorasArray_HTML.filter(\r\n                    li => !horasId_Tomados.includes(li.dataset.horaid)\r\n                );\r\n\r\n                // Simil:\r\n                // let li_NO_Tomados = [];\r\n\r\n                // listadoHorasArray_HTML.forEach(li => {\r\n                //     if(!horasId_Tomados.includes(li.dataset.horaid)) {\r\n                //         li_NO_Tomados.push(li);\r\n                //     }\r\n                // });\r\n\r\n            // 5. les quitamos la clae que los deshabilita a los li que no han sido tomados\r\n                li_NO_Tomados.forEach(li => li.classList.remove('horas__hora--deshabilitada'));\r\n\r\n            // 6. Seleccionamos las horas que quedan disponibles\r\n                const horasDisponibles = document.querySelectorAll('#horas li:not(.horas__hora--deshabilitada)');\r\n\r\n            // 7. Les aÃ±adimos un evento\r\n                horasDisponibles.forEach( hora => hora.addEventListener('click', seleccionarHora))\r\n        }\r\n\r\n        function seleccionarHora(e) {\r\n\r\n            //UI\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n\r\n            if(horaPrevia) {\r\n                horaPrevia.classList.remove('horas__hora--seleccionada');\r\n            }\r\n\r\n            e.target.classList.add('horas__hora--seleccionada');\r\n\r\n            //Back\r\n            inputHiddenHora.value = Number(e.target.dataset.horaid);\r\n            inputHiddenDia.value = Number(document.querySelector('[name=\"dia\"]:checked').value);\r\n\r\n            console.log('inputHiddenHora.value ' , inputHiddenHora.value);\r\n            console.log('inputHiddenDia.value ' , inputHiddenDia.value);\r\n            console.log('categoria selected ' , busqueda['categoria_id']);\r\n        }\r\n    }\r\n})();","(function() {\r\n\r\n    const influencersInput = document.querySelector('#influencers');\r\n\r\n    if (!influencersInput) return;\r\n\r\n    let influencers = [];\r\n    let influencersFiltrados = [];\r\n    const listadoInfluencers = document.querySelector('#listado-influencers');\r\n    const influencerHidden = document.querySelector('[name=\"influencer_id\"');\r\n\r\n    obtenerInfluencers();\r\n\r\n    influencersInput.addEventListener('input', buscarInfluencer);\r\n\r\n    async function obtenerInfluencers() {\r\n        const url = `/api/influencers`;\r\n\r\n        const respuesta = await fetch(url);\r\n        const resultado = await respuesta.json();\r\n\r\n        formatearInfluencers(resultado);\r\n    }\r\n\r\n    function formatearInfluencers(arrayInfluencers = []) {\r\n        \r\n        influencers = arrayInfluencers.map(influencer => {\r\n            return {\r\n                nombre: `${influencer.firstName.trim()} ${influencer.lastName.trim()}`,\r\n                id: influencer.id\r\n            }\r\n        })\r\n        \r\n        console.log('resultado API(influencers): ', influencers);\r\n    }\r\n\r\n    function buscarInfluencer(e) {\r\n        const busqueda = e.target.value;\r\n        \r\n        if(busqueda.length < 3) {\r\n            influencersFiltrados = [];\r\n            \r\n            while(listadoInfluencers.firstChild) {  // listadoInfluencers.innerHTML = '';\r\n                listadoInfluencers.removeChild(listadoInfluencers.firstChild);\r\n            }\r\n\r\n            return;\r\n        }\r\n        \r\n        //Quitamos la tilde con normalize + regular expression \r\n        const busqueda_sin_tilde = busqueda.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r\n        \r\n        // Expresion Regular: buscan patrones en un valor\r\n        // En este caso, omitimos las masyuculas a la hora de evaluar una condicion\r\n        const expresion = new RegExp(busqueda_sin_tilde, \"i\");\r\n\r\n        influencersFiltrados = influencers.filter(influencer => {\r\n\r\n            let influencer_sinTilde = influencer.nombre.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r\n\r\n            if(influencer_sinTilde.toLowerCase().search(expresion) != -1){\r\n                return influencer;\r\n            } \r\n        });\r\n\r\n        mostrarInfluencer();\r\n    }\r\n\r\n    function mostrarInfluencer() {\r\n        \r\n        while(listadoInfluencers.firstChild) {  // listadoInfluencers.innerHTML = '';\r\n            listadoInfluencers.removeChild(listadoInfluencers.firstChild);\r\n        }\r\n\r\n        if(influencersFiltrados.length > 0) {\r\n\r\n            influencersFiltrados.forEach(influencer => {\r\n\r\n                const influencerHTML = document.createElement('LI');\r\n                influencerHTML.classList.add('listado-influencers__influencer');\r\n                influencerHTML.textContent = influencer.nombre;\r\n                influencerHTML.dataset.influencerId = influencer.id;\r\n                influencerHTML.onclick = seleccionarInfluencer;\r\n                \r\n                listadoInfluencers.appendChild(influencerHTML);\r\n            });\r\n\r\n        } else {\r\n\r\n            const noResultados = document.createElement('P');\r\n            noResultados.classList.add('listado-influencers__no-resultado');\r\n            noResultados.textContent = \"No hay resultados para tu bÃºsqueda\";\r\n\r\n            listadoInfluencers.appendChild(noResultados);\r\n\r\n        }\r\n    }\r\n\r\n    function seleccionarInfluencer(e) {\r\n        const influencer = e.target;\r\n\r\n        const influencerPrevio = document.querySelector('.listado-influencers__influencer--seleccionado');\r\n\r\n        if(influencerPrevio) {\r\n            influencerPrevio.classList.remove('listado-influencers__influencer--seleccionado');\r\n        }\r\n\r\n        influencer.classList.add('listado-influencers__influencer--seleccionado');\r\n\r\n        influencerHidden.value = influencer.dataset.influencerId;\r\n    }\r\n}\r\n)();","(function() {\r\n    const tagsInput = document.querySelector('#tags_input');\r\n\r\n    if(tagsInput) {\r\n\r\n        const tagsDiv = document.querySelector('#tags');\r\n        const tagsInputHidden = document.querySelector('[name = \"tags\"]');\r\n        let tags = [];\r\n\r\n        //Leer los tags para la opcion de actualizar registros\r\n        if(tagsInputHidden.value !== '') {\r\n            tags = tagsInputHidden.value.split(',');\r\n            mostrarTags();\r\n        }\r\n\r\n        tagsInput.addEventListener('keypress', guardarTag);\r\n\r\n        function guardarTag(e) {\r\n            \r\n            if(e.key === ',') { \r\n\r\n                if(e.target.value.trim() === '' || e.target.value.length < 1) {\r\n                  return;  \r\n                }\r\n                \r\n                e.preventDefault();\r\n\r\n                tags = [...tags, e.target.value.trim()]; //trim: elimina espacios\r\n                tagsInput.value = '';\r\n                mostrarTags();\r\n            }\r\n        }\r\n\r\n        function mostrarTags() {\r\n            tagsDiv.textContent = '';\r\n            tags.forEach(tag => {\r\n                const etiqueta = document.createElement('LI');\r\n                etiqueta.classList.add('formulario__tag');\r\n                etiqueta.textContent = tag;\r\n                etiqueta.onclick = eliminarTag;\r\n                tagsDiv.appendChild(etiqueta);\r\n            });\r\n\r\n            //Despues de mostrar los tags convertimos tags to string\r\n            actualizarInputHiden(); \r\n        }\r\n        \r\n        function eliminarTag(e) {\r\n            e.target.remove();\r\n            \r\n            // todas las etiquetas excepto a la que le dimos clic (e.target)\r\n            tags = tags.filter(tag => tag !== e.target.textContent);\r\n            actualizarInputHiden(); \r\n        }\r\n\r\n        function actualizarInputHiden() {\r\n            tagsInputHidden.value = tags.toString();\r\n        }\r\n\r\n    }   //if(tagsInput)\r\n    \r\n})()\r\n"]}